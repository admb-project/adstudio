\input texinfo
@setfilename adstudio.info
@afourpaper
@kbdinputstyle code
@set VERSION 1.0
@set INSTALLER adstudio-10
@set ADMBDIR admb120-gcc493-win64
@set DATE (2018-01-22)
@set REVISED Revised manual (2019-01-09)
@set YEARS 2018
@macro screen{filename}
@sp
@center @image{\filename\,13.5cm}
@sp
@end macro
@macro subsec{label}
@sp 0.5
@noindent @b{\label\}
@end macro
@macro clickthis{clicks}
@t{@i{@clicksequence{\clicks\}}}
@end macro
@macro icon{filename}
@image{\filename\,9.5pt}
@end macro
@macro bigicon{filename}
@image{\filename\,12pt}
@end macro

@copying
This is the manual for AD Studio version
@value{VERSION}.@*
The latest edition of the manual is available at:@*
@uref{https://github.com/admb-project/adstudio}
@sp
Copyright @copyright{} @value{YEARS} Arni Magnusson
@sp
AD Studio is an aggregate of the following software components:
@itemize
@item AD Studio settings @value{VERSION}, released under the Simplified BSD
License.@*
Source code:
@uref{https://github.com/admb-project/adstudio/blob/master/dot/.emacs}
@item ADMB 12.0, released under the BSD License.@*
Source code: @uref{http://ftp.admb-project.org/}
@item Emacs 25.3.1, released under the GPL.@*
Source code: @uref{ftp://ftp.gnu.org/gnu/emacs/}
@item Emacs ADMB Mode 12.0-0, released under the Simplified BSD License.@*
Source code:
@uref{https://github.com/admb-project/admb/blob/master/contrib/emacs}
@item Emacs AUC@TeX@ 12.1, released under the GPL.@*
Source code: @uref{ftp://ftp.gnu.org/gnu/auctex/}
@item Emacs Markdown Mode 2.3, released under the GPL.@*
Source code: @uref{https://github.com/jrblevin/markdown-mode}
@item Emacs Speaks Statistics (ESS) 17.11, released under the GPL.@*
Source code: @uref{http://ess.r-project.org/downloads/ess/}
@item Emacs TMB Mode 3.4, released under the GPL.@*
Source code: @uref{https://github.com/kaskr/adcomp/blob/master/emacs}
@item Rtools 3.4 (GCC and GDB), released under the GPL.@*
Source code: @uref{ftp://ftp.gnu.org/gnu/gcc/} and
@uref{ftp://ftp.gnu.org/gnu/gdb/}
@end itemize
@end copying

@titlepage
@title AD Studio
@subtitle Statistical modelling in ADMB and TMB
@subtitle Version @value{VERSION} @value{DATE}
@subtitle @value{REVISED}
@author Arni Magnusson
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents @cindex

@chapter Preamble

@section Credit

AD Model Builder (ADMB) was written by David Fournier at Otter Research in
Canada, and Template Model Builder (TMB) was written by Kasper Kristensen at DTU
Aqua in Denmark.

@section Simplified Emacs

One of the main goals of AD Studio is to make the convenient Emacs features of
@command{admb-mode} and @command{tmb-mode} available to non-Emacs users. In
other words, to disable the standard Emacs behavior.

@cartouche
@noindent
Experienced Emacs users may prefer to ignore the AD Studio @file{.emacs} file,
and simply install and load ADMB Mode (@file{admb.el}) and TMB Mode
(@file{tmb.el}) like other Emacs packages. They are written as standard ``major
modes'' that follow all Emacs mode conventions.
@end cartouche

@section History and name

AD Studio is the unification and successor of ADMB-IDE (Magnusson 2009) and
TMB-IDE (Magnusson 2015). The `AD' stands for automatic differentiation and
`Studio' is a commonly used synonym for IDE (integrated development
environment).

@section System requirements

@subsec 64-bit

@noindent
AD Studio requires a 64-bit operating system. Windows 32-bit users can continue
to use previous versions of ADMB-IDE (11.2) and TMB-IDE (1.6).

@subsec Rtools, R, TMB

@noindent
Rtools, R, and TMB may already exist on the machine before AD Studio is set up.
If Rtools is not already installed, the AD Studio installer can (optionally) do
that. Users are expected to install R and the TMB package on their own, as these
are frequently updated.

@chapter AD Studio overview

@section Statistical modelling

Developing statistical models in ADMB and TMB is an iterative process that
consists of writing, compiling, testing, and debugging. AD Studio has been
designed specifically to allow the user to perform these tasks more efficiently
than in other working environments. For example, TMB model development involves
working on C++ and R code side by side on the screen, but in some editors, such
as RStudio, it is not possible to view two source code files at the same time.

GNU Emacs is a complex and powerful editor that comes with particularly good
support for C++, R, @LaTeX, backup/version control, and other useful features
for statistical computing. The dedicated ADMB and TMB modes provide syntax
highlighting, compilation, file manipulation, outline code navigation,
templates, and smaller tools for developing models. Emacs users can download
@file{admb-mode.el} and @file{tmb-mode.el} and start using them right away,
after reading the commentary at the top of these files.

The problem with Emacs is that it requires considerable time to learn and
configure, although for advanced statistical computing this can be a rewarding
investment. As the programmer Larry Wall once said: ``If ease of use was the
highest goal, we'd all be driving golf carts.'' The
@uref{http://admb-project.org/tools/editors/emacs} page contains some pointers
for setting up and learning Emacs. There are, however, good reasons why many
users may not feel like adopting Emacs as their main editor, but would still
appreciate a dedicated environment for ADMB and TMB.

The rest of this tutorial demonstrates how AD Studio can used without learning
the details of Emacs. This is achieved with unusual @file{.emacs} settings that
emulate common keybindings of basic editors, while disabling some of the most
used Emacs keybindings. This @file{.emacs} file is therefore not intended for
experienced Emacs users, although they may find it an interesting read.

@section Software components

AD Model Builder (@strong{ADMB}) and Template Model Builder (@strong{TMB}) are
software platforms that utilize automatic differentiation (AD) and Laplace
approximation to estimate parameters and random effects in a fast and reliable
way. ADMB and TMB generally give the same model fit, but they offer different
features. ADMB is a stand-alone application that tends to have better MCMC
functionality, while TMB is an R package that allows more convenient and faster
estimation of random effects.

The @strong{Emacs} editor has dedicated modes for editing different file types
and for other tasks. In addition to standard Emacs features, AD Studio includes
modes to work with ADMB, @LaTeX, Markdown, R, and TMB.

The @strong{GCC} C++ compiler and @strong{GDB} debugger are provided by Rtools.
By using the same compiler to build ADMB and TMB models, AD Studio makes it easy
to work with ADMB and TMB on the same machine without running into compiler
version conflicts.

@strong{R} is required for using TMB, but is not installed as part of AD Studio.
Users are expected to install R and the TMB package on their own, as these are
frequently updated.

@page

@section Installation

AD Studio consists of components that can be set up individually by hand
(Windows, Linux, Mac) or using an installer (Windows).

@subsec Installer

@noindent
The Windows installer @file{@value{INSTALLER}.exe} sets up ADMB, GCC, GDB,
Emacs, and the Emacs packages, along with file associations and environment
variables to glue everything together.

@sp
@screen{intro-install}

@noindent
Once installed, the software components reside in four different root
directories:

@multitable @columnfractions .15 .35
@item Directory        @tab Component
@item @code{c:/~}      @tab Emacs packages and settings
@item @code{c:/admb}   @tab ADMB
@item @code{c:/gnu}    @tab Emacs
@item @code{c:/Rtools} @tab Rtools
@end multitable

@noindent
This directory structure can be practical for setting up other free statistical
software, such as R. By separating the main program (@code{c:/gnu/r}) from the
user settings (@code{c:/~/.Rprofile, c:/~/Rconsole}) and user libraries
(@code{c:/~/r/library}), the main program can be removed and upgraded without
affecting the user setup.

One thing to keep in mind is that the installer modifies the user @env{HOME} and
@env{PATH} environment variables, as well as file associations. In rare cases,
users may need to reconfigure these according to taste and needs after
installing AD Studio.

@page

@subsec Manual setup

@noindent
Windows users can also set up and configure ADMB, Emacs, and Rtools by hand,
starting from the @file{@value{INSTALLER}.zip} kit. The following guidelines may
be useful for that:

@uref{http://admb-project.org/docs}

@uref{http://admb-project.org/tools/editors/emacs/install}

@uref{http://admb-project.org/tools/editors/emacs/configure}

@uref{https://cran.r-project.org/bin/windows/Rtools/}

@sp 0.5

@noindent
See also the @ref{Configuration} section in this manual, especially about the
environment variables @env{ADMB_HOME} and @env{PATH}.

@subsec AD Studio Linux/Mac

@noindent
Setting up AD Studio for Linux or Mac is equivalent to the ``manual setup''
described above, so the same guidelines apply. The key steps are:

@enumerate
@item Install ADMB, GNU Emacs, GCC (including the C++ component), and GDB.

@item Download the AD Studio
@uref{https://raw.githubusercontent.com/admb-project/adstudio/master/dot/.emacs,@file{.emacs}}
settings and place the file in @file{~/.emacs} to apply the simplified Emacs
user interface.

@item Download Emacs packages and place inside @code{~/emacs/lisp} to
provide mode-specific syntax highlighting and commands.
@end enumerate

@noindent
The screenshots in the next chapter are from Windows, but AD Studio looks very
similar in Linux:

@screen{intro-linux}

@chapter ADMB tutorial

@section Create a working copy of @command{simple}

First open Windows Explorer and create a folder called @code{c:/simple}. Then
navigate to @code{c:/admb/@value{ADMBDIR}/examples/admb/simple} and copy the
model and data files, creating:

@example
c:/simple/simple.dat
c:/simple/simple.tpl
@end example

Now double-click @file{simple.tpl} in the @code{c:/simple} folder. The file
should open in Emacs in @command{admb-mode} (see red circle) and the code should
be in color:

@screen{tutor-open-circle}

@page

@section Build, run, and view the results

Build the model by clicking the @icon{icon-connect} icon, or press @key{f8}:

@screen{tutor-build-circle}

@page

@noindent
Run the model by clicking the @icon{icon-jump-to} icon, or press @key{f9}:

@screen{tutor-run-circle}

Many ADMB models output their results to a @file{.rep} report file, and AD
Studio provides the @icon{icon-describe} icon and @key{f10} key to open the
report file. The @command{simple} model outputs no report file, but the
parameter estimates, standard errors, and correlations are found in the
@file{.cor} file.

This is an opportunity to introduce basic buffer and window management. In
Emacs, a buffer is like a page, often representing a file, but sometimes other
things, like compilation and command output. The Emacs screen is divided into
one or more windows, where each window shows one buffer, while other buffers
reside in the background. Explore the @clickthis{Buffers} menu, as well as
buffer-related @ref{Keybindings}. A window can be split in two by selecting
@clickthis{New Window Below} (@kbd{C-x 2}) or @clickthis{New Window on Right}
(@kbd{C-x 3}) in the @clickthis{File} menu. The @key{escape} key lets one window
fill the Emacs screen.

Try out different ways to open the @file{.cor} file:

@enumerate
@item Press @key{escape} to maximize the active window. Then click the
@icon{icon-open} icon or press @kbd{C-o} (@key{Ctrl} and @key{o}) and select
@code{c:/simple/simple.cor}.
@item Press @key{escape} to maximize the active window, @kbd{C-x 3} to split
into two windows, and select the window on the right with a mouse click or
@key{f6}. Click the @icon{icon-open} icon or press @kbd{C-o} and select
@code{c:/simple/simple.cor}.
@item Click the @clickthis{ADMB @click{} View Estimates} menu entry or press
@kbd{S-f10}.
@item Click the @clickthis{ADMB @click{} View Any} menu entry or press
@kbd{C-p}, then type @samp{cor} and @key{return}.
@end enumerate

@page

@screen{tutor-cor}

After viewing, maximize a window by pressing @key{escape}, or close a window by
clicking the @icon{icon-close} icon or pressing @kbd{C-w} or @kbd{C-f4}.

@cartouche
@noindent
Note how the @clickthis{ADMB} menu and toolbar icons are only available when the
active window is in @command{admb-mode}. Press @key{f2} at any point to switch a
window to @command{admb-mode}.
@end cartouche

@page

@section Debug

@b{Types of bugs}
@anchor{Types of bugs}

@noindent
Bugs in ADMB models can be categorized by the point of discovery:

@enumerate
@item @command{tpl2cpp} reports a bug (cannot translate)
@item @command{g++} reports a bug (cannot compile or link)
@item The model builds fine, but crashes or writes no output when run (no
results)
@item The model runs fine, but not like it is supposed to (strange results)
@end enumerate

@subsec Locating bugs

@itemize
@item Warnings or error messages indicate line number, or function/variable name
@item Insert lines of code that print informative messages during runtime
@item Comment out parts of the code
@item Use a debugger
@end itemize

@subsec Example 1: @command{tpl2cpp} reports a bug

@noindent
Create a bug by inserting an extra space inside a vector declaration:
@code{init_vector Y(1,nobs)} @arrow{} @code{init_vector Y(1, nobs)}. Then click
the @icon{icon-disconnect} icon or press @key{f7} to translate TPL to C++:

@screen{bug-tpl}

The @command{tpl2cpp} translator reports an error in line 36 of
@file{simple.tpl}. Click @clickthis{Edit @click{} Go To @click{} Goto Line} or
press @kbd{C-g} to move the cursor to that line, and then remove the unwanted
space.

@page

@subsec Example 2: @command{g++} reports a bug

@noindent
Create a bug by referring to a nonexistent variable: @code{init_vector
Y(1,nobs)} @arrow{} @code{init_vector Y(1,n)}. Then click the
@icon{icon-connect} icon or press @key{f8} to build the model:

@screen{bug-gcc}

The @command{g++} compiler reports an error in line 11 of @file{simple.cpp}.
Click the highlighted filename to open the C++ source file with the cursor in
that line. After realizing what the problem is (with the help of the error
message @t{@i{`n' was not declared in this scope}}), go back to the ADMB code in
@file{simple.tpl} and change the @samp{n} to @samp{nobs}.

@page

@subsec Example 3: No results

@noindent
Create a bug by dividing by zero at the top of the @code{DATA_SECTION}: @code{!!
cout << 1/0 << endl;}. Then click the @icon{icon-connect} icon or press @key{f8}
to build the model. Ignoring the warning, click @icon{icon-jump-to} or press
@key{f9} to run the model:

@screen{bug-nothing}

@sp 0.5

The shell command @command{simple} exits abnormally with code 1, a generic code
for failure. The easiest way to search for this bug is to insert informative
messages in the code, like

@example
DATA_SECTION
  !! cout << "DATA_SECTION begins" << endl;
  ...
  !! cout << "DATA_SECTION ends" << endl;
@end example

@noindent
and/or simplify the model, possibly by commenting out parts of the code. After
narrowing the search step by step, the problematic line(s) can be changed or
removed. To comment or uncomment large parts of code, use the @kbd{M-;}
keystroke (@pxref{Keybindings}).

@page

@subsec Example 4: Strange results

@noindent
Create a bug by dividing by zero in a @code{PROCEDURE_SECTION} assignment:
@code{pred_Y=a*x+b;} @arrow{} @code{pred_Y=a*x+b/0;}. Then click the
@icon{icon-connect} icon or press @key{f8} to build the model (this time there
is no compiler warning). Click @icon{icon-jump-to} or press @key{f9} to run the
model:

@screen{bug-strange}

The ADMB on-screen report indicates successful convergence (exit code 0) with an
objective function value of @samp{-1.#INDe+000}, while Emacs reports failure
(exit code 1). The easiest way to search for this bug is to insert informative
messages in the code, like

@example
PROCEDURE_SECTION
  cout << "The value of a   is: " << a   << endl;
  cout << "The value of a*x is: " << a*x << endl;
  cout << "The value of b   is: " << b   << endl;
  cout << "The value of b/0 is: " << b/0 << endl;
  cout << "The value of f   is: " << f   << endl;
@end example

@noindent
and/or simplify the model, possibly by commenting out parts of the code. A more
advanced option is to use a debugger.

@page

@subsec GDB: When the going gets tough
@anchor{GDB}

@noindent
GNU Emacs and GCC can interact closely with the GDB debugger---these programs
were all created by the same programmer, Richard Stallman. A program must
fulfill two conditions before debugging:

@itemize
@item The model executable (e.g., @file{simple.exe}) must build successfully,
so a debugger is only helpful for bugs of type 3 and 4 (@pxref{Types of bugs}).
@item The model executable must include debugging symbols. To embed debugging
symbols with AD Studio, either select ``Debug'' compilation from the
@clickthis{ADMB @click{} Target} menu, or press @kbd{C-- g} (@key{Ctrl} and
@key{-}, then @key{g}), followed by @key{return}.
@end itemize

Using GDB to debug an ADMB model is beyond the scope of this tutorial, but when
simpler debugging methods fail, it is time to click @clickthis{Tools @click{}
Debugger (GDB)}:

@screen{bug-gdb}

@chapter TMB tutorial

@section Create a working copy of @command{mini}

@subsec Directory

@noindent
Open AD Studio and create a working directory called @file{c:/demo}:

@example
M-n
c:/demo
C-d
c:/demo
@end example

@noindent
The @kbd{M-n} keystroke means hold @key{Alt} and press @key{n}. This creates
a new directory.

@noindent
The @kbd{C-d} keystroke means hold @key{Ctrl} and press @key{d}. This sets the
current directory.

@noindent
See @ref{Keybindings}, for a full list of AD Studio keybindings.

@subsec Model

@noindent
Now switch to @command{tmb-mode} (@key{f3}) to work with TMB.

AD Studio comes with a built-in TMB example model, which can be used as a
minimal template to create a new model. To create a mini template in the current
directory, find the menu above the editor window and select @clickthis{TMB
@click{} Mini Template} or press @key{f12} and @key{return}.

The screen will now split in two parts, which is the default state of a TMB
session in AD Studio. The TMB model code (C++) is in the main window and the
compilation script (R) in a secondary window. The cursor remains in the TMB
model window, which makes TMB-specific commands available via the menu and
keybindings.

@section Build, run, and view the results

The compilation script contains R code that compiles and runs the model. There
are two alternative ways to build a TMB model:

@itemize
@item @clickthis{TMB @click{} Build} or @key{f8}: only build the model
@item @clickthis{TMB @click{} Run} or @key{f9}: run R script, typically builds
(if not already built) and runs the model
@end itemize

@subsec Manage buffers

@noindent
The secondary window is now showing either compilation output or an active R
session, but the R script is no longer visible. To switch between the R script,
compilation output, and the R session, select @clickthis{View Script}
(@key{f11}), @clickthis{View Compilation}, or @clickthis{View R Session} in the
TMB menu.

@cartouche
@noindent
Note how the @clickthis{TMB} menu is only available when the active window is in
@command{tmb-mode}. Press @key{f3} at any point to switch a window to
@command{tmb-mode}.
@end cartouche

This is a good time to revisit basic buffer and window management. In Emacs, a
buffer is like a page, often representing a file, but sometimes other things,
like compilation and command output. The Emacs screen is divided into one or
more windows, where each window shows one buffer, while other buffers reside in
the background. Explore the @clickthis{Buffers} menu, as well as buffer-related
@ref{Keybindings}. A window can be split in two by selecting @clickthis{New
Window Below} (@kbd{C-x 2}) or @clickthis{New Window on Right} (@kbd{C-x 3}) in
the @clickthis{File} menu. The @key{escape} key lets one window fill the Emacs
screen.

@page

@screen{tmb-mode}

@subsec Run R script

@noindent
While working with TMB models, it is often convenient to keep the cursor inside
the TMB window containing the C++ code. This way, the @command{tmb-mode}
facilities (menu, keybindings, etc.) remain active. The menu command
@clickthis{TMB @click{} Run} (@key{f9}) runs the entire R script, but selected
parts of the script can also ben run stepwise (See @ref{R mode}).

@section Debug

To debug a TMB model in AD Studio, select @clickthis{TMB @click{} Debug} or
press @key{f10}. This starts an R session that invokes the GNU Debugger (GDB).
To finish the debugging session, type @code{quit} in the @code{(gdb)} prompt.

@chapter R, @LaTeX, and other modes

@section R mode
@anchor{R mode}

Positioning the cursor inside an R script window activates @command{R-mode},
that is part of the Emacs Speaks Statistics (ESS) package. It is a feature-rich
mode that supports a variety of R tasks, including package development and
debugging, as reflected in the @clickthis{ESS} menu items. Inside an R script
buffer, @key{f9}, @key{f10}, and @key{f11} can be used to run R scripts, a
line/paragraph at a time or the entire script. See @ref{R mode keybindings}.

@section @LaTeX@ mode

AD Studio also comes with @command{TeX-latex-mode} that is part of the Emacs
AUC@TeX@ package. When editing a @LaTeX@ document, the @clickthis{LaTeX} menu
provides commands to work with sections and environments, while the
@clickthis{Command} menu is helpful to compile and view documents. AD Studio
makes these tasks even easier with the @key{f7}, @key{f8}, @key{f9}, and
@key{f10} @ref{@LaTeX@ mode keybindings}.

@section Other modes

A variety of other Emacs modes are activated as needed. For example, a
@clickthis{Markdown} menu appears while editing a Markdown document. Whenever
working with a file that is under version control, such as Git, a submenu
appears close to the bottom of screen, with commands to view changes and other
tasks.

AD Studio makes an effort to document and customize the modes related to ADMB,
TMB, R, and @LaTeX@ files. Other modes are left to the user to discover, study,
and customize. These are documented elsewhere in detail, and many help resources
are available online.

@chapter User interface

@section Menu

@subsec ADMB mode

@multitable @columnfractions .25 .34 .27
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Menu label} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item Translate            @tab Translate TPL to C++        @tab @command{admb-tpl2cpp}
@item Compile              @tab Compile C++ to object code  @tab @command{admb-compile}
@item Link                 @tab Link object code to exe     @tab @command{admb-link}
@item Build                @tab Build executable from TPL   @tab @command{admb-make}
@item@hrule@tab@hrule@tab@hrule
@item Run                  @tab Run executable              @tab @command{admb-run}
@item Run with Args        @tab Run executable with args    @tab @command{admb-run-args}
@item Run Makefile         @tab Run Makefile in current dir @tab @command{admb-run-makefile}
@item Stop                 @tab Stop current process        @tab @command{admb-kill-process}
@item@hrule@tab@hrule@tab@hrule
@item View Report          @tab Open .rep file              @tab @command{admb-rep}
@item View Estimates       @tab Open .cor file              @tab @command{admb-cor}
@item View Point Estimates @tab Open .par file              @tab @command{admb-par}
@item View Initial Values  @tab Open .pin file              @tab @command{admb-pin}
@item View C++             @tab Open C++ file               @tab @command{admb-cpp}
@item View Any             @tab Open model file             @tab @command{admb-open}
@item Clean Directory      @tab Remove temporary files      @tab @command{admb-clean}
@item@hrule@tab@hrule@tab@hrule
@item Outline              @tab Navigate with outline       @tab @command{admb-outline}
@item Imenu                @tab Navigate with imenu         @tab @command{imenu}
@item Template             @tab Insert template             @tab @command{admb-template}
@item Mini Template        @tab Insert minimal template     @tab @command{admb-template-mini}
@item Toggle Section       @tab Toggle section indicator    @tab @command{admb-toggle-section}
@item Toggle Window        @tab Toggle secondary window     @tab @command{admb-toggle-window}
@item@hrule@tab@hrule@tab@hrule
@item Target               @tab Choose what to build        @tab @command{admb-set-flags}
@item@hrule@tab@hrule@tab@hrule
@item Help                 @tab Show help page              @tab @command{admb-help}
@item ADMB Mode Version    @tab Show ADMB Mode version      @tab @command{admb-mode-version}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@page

@subsec TMB mode

@multitable @columnfractions .25 .30 .30
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Menu label} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item Stop                @tab Stop current process    @tab @command{tmb-kill-process}
@item Clean               @tab Remove *.o, *.so, *.dll @tab @command{tmb-clean}
@item@hrule@tab@hrule@tab@hrule
@item Compile             @tab Build model             @tab @command{tmb-compile}
@item Run                 @tab Run R script            @tab @command{tmb-run}
@item Make                @tab Run makefile            @tab @command{tmb-make}
@item@hrule@tab@hrule@tab@hrule
@item Debug               @tab Debug model with GDB    @tab @command{tmb-debug}
@item Toggle NaN Debug    @tab Toggle NaN exceptions   @tab @command{tmb-toggle-nan-debug}
@item@hrule@tab@hrule@tab@hrule
@item View Script         @tab Show R script           @tab @command{tmb-open}
@item View Compilation    @tab Show compilation output @tab @command{tmb-show-compilation}
@item View R Session      @tab Show R sesssion         @tab @command{tmb-show-r}
@item@hrule@tab@hrule@tab@hrule
@item Mini Template       @tab Create minimal template @tab @command{tmb-template-mini}
@item Multi-Window Layout @tab Arrange three windows   @tab @command{tmb-multi-window}
@item Toggle Window       @tab Toggle secondary window @tab @command{tmb-toggle-window}
@item@hrule@tab@hrule@tab@hrule
@item Help                @tab Show help page          @tab @command{tmb-help}
@item TMB Mode Version    @tab Show TMB Mode version   @tab @command{tmb-mode-version}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@page

@section Toolbar

@subsec General

@multitable @columnfractions .05 .34 .27
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Icon} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @bigicon{icon-new}   @tab New buffer @tab @command{new-buffer}
@item @bigicon{icon-open}  @tab Open file  @tab @command{find-file}
@item @bigicon{icon-save}  @tab Save file  @tab @command{save-buffer}
@item @bigicon{icon-cut}   @tab Cut        @tab @command{kill-region}
@item @bigicon{icon-copy}  @tab Copy       @tab @command{copy-region-as-kill}
@item @bigicon{icon-paste} @tab Paste      @tab @command{cua-paste}
@item @bigicon{icon-undo}  @tab Undo/redo  @tab @command{undo}
@item @bigicon{icon-close} @tab Close      @tab @command{kill-this-buffer}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@sp 2

@subsec ADMB mode

@multitable @columnfractions .05 .34 .27
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Icon} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @bigicon{icon-disconnect} @tab Translate TPL to C++      @tab @command{admb-tpl2cpp}
@item @bigicon{icon-connect}    @tab Build executable from TPL @tab @command{admb-make}
@item @bigicon{icon-jump-to}    @tab Run executable            @tab @command{admb-run}
@item @bigicon{icon-describe}   @tab Open .rep file            @tab @command{admb-rep}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@sp 2

@subsec TMB mode

@multitable @columnfractions .05 .34 .27
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Icon} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @bigicon{icon-disconnect} @tab Remove *.o, *.so, *.dll @tab @command{tmb-clean}
@item @bigicon{icon-connect}    @tab Build model             @tab @command{tmb-compile}
@item @bigicon{icon-jump-to}    @tab Run R script            @tab @command{tmb-run}
@item @bigicon{icon-describe}   @tab Debug model with GDB    @tab @command{tmb-debug}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@page

@section Keybindings
@anchor{Keybindings}

In combinations, @samp{S-} means @key{Shift}, @samp{C-} means @key{Ctrl}, and
@samp{M-} means the @key{Alt} key.

@multitable @columnfractions .15 .40 .40
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Keystroke} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{f1}       @tab Reminder about F2 and F3       @tab @command{adstudio-help}
@item @kbd{S-f1}     @tab Show AD Studio version         @tab @command{adstudio-version}
@item @kbd{f2}       @tab ADMB mode                      @tab @command{admb-mode}
@item @kbd{f3}       @tab TMB mode                       @tab @command{tmb-mode}
@item @kbd{f4}       @tab R mode                         @tab @command{R-mode}
@item @kbd{C-f4}     @tab Close                          @tab @command{kill-buffer-maybe-window}
@item @kbd{M-f4}     @tab Quit                           @tab @command{save-buffers-kill-emacs}
@item @kbd{f5}       @tab Reload                         @tab @command{revert-buffer}
@item @kbd{f6}       @tab Other window                   @tab @command{other-window}
@item @kbd{C-f6}     @tab Next buffer                    @tab @command{bs-cycle-next}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{C-,}      @tab Toggle trailing whitespace     @tab @command{toggle-trailing-whitespace}
@item @kbd{C-.}      @tab Toggle section indicator       @tab @command{which-function-mode}
@item @kbd{C-a}      @tab Select all                     @tab @command{mark-whole-buffer}
@item @kbd{C-b}      @tab Next buffer                    @tab @command{bs-cycle-next}
@item @kbd{C-c}      @tab Copy                           @tab @command{cua--prefix-override-handler}
@item @kbd{C-d}      @tab Change directory               @tab @command{cd}
@item @kbd{C-e}      @tab End                            @tab @command{move-end-of-line}
@item @kbd{C-f}      @tab Find, find next                @tab @command{isearch-forward}
@item @kbd{C-g}      @tab Goto line                      @tab @command{goto-line}
@item @kbd{C-h}      @tab Emacs help system              @tab @command{help}
@item @kbd{C-l}      @tab Recenter                       @tab @command{recenter}
@item @kbd{C-n}      @tab New file                       @tab @command{new-buffer}
@item @kbd{C-o}      @tab Open                           @tab @command{find-file}
@item @kbd{C-p}      @tab Open in other window           @tab @command{find-file-other-window}
@item @kbd{C-q}      @tab Quit                           @tab @command{save-buffers-kill-emacs}
@item @kbd{C-r}      @tab Replace                        @tab @command{query-replace}
@item @kbd{C-s}      @tab Save                           @tab @command{save-buffer}
@item @kbd{C-S}      @tab Save as                        @tab @command{write-file}
@item @kbd{C-t}      @tab Toggle F2 and F3 reminder      @tab @command{adstudio-toggle-reminder}
@item @kbd{C-v}      @tab Paste                          @tab @command{cua-paste}
@item @kbd{C-w}      @tab Close                          @tab @command{kill-buffer-maybe-window}
@item @kbd{C-x}      @tab Cut                            @tab @command{cua--prefix-override-handler}
@item @kbd{C-x 2}    @tab Split window above/below       @tab @command{split-window-vertically}
@item @kbd{C-x 3}    @tab Split window left/right        @tab @command{split-window-horizontally}
@item @kbd{C-z}      @tab Undo/redo                      @tab @command{undo}
@item @kbd{C-return} @tab Rectangle functions            @tab @command{cua-set-rectangle-mark}
@item @kbd{C-space}  @tab Expand recognized words        @tab @command{dabbrev-expand}
@item @kbd{M-,}      @tab Delete trailing whitespace     @tab @command{delete-trailing-spc-tab-m}
@item @kbd{M-;}      @tab Comment/uncomment region       @tab @command{comment-dwim}
@item @kbd{M-n}      @tab New folder                     @tab @command{make-directory}
@item @kbd{escape}   @tab Cancel dialog, maximize window @tab @command{keyboard-escape-quit}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@page

@subsec ADMB mode

@multitable @columnfractions .15 .40 .40
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Keystroke} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{f1}          @tab Help for ADMB mode        @tab @command{admb-help}
@item @kbd{f7}          @tab Translate TPL to C++      @tab @command{admb-tpl2cpp}
@item @kbd{f8}          @tab Build executable from TPL @tab @command{admb-build}
@item @kbd{f9}          @tab Run executable            @tab @command{admb-run}
@item @kbd{S-f9}        @tab Run executable with args  @tab @command{admb-run-args}
@item @kbd{f10}         @tab Open .rep file            @tab @command{admb-rep}
@item @kbd{S-f10}       @tab Open .cor file            @tab @command{admb-cor}
@item @kbd{f11}         @tab Navigate with outline     @tab @command{admb-outline}
@item @kbd{S-f11}       @tab Navigate with imenu       @tab @command{imenu}
@item @kbd{f12}         @tab Insert template           @tab @command{admb-template}
@item @kbd{S-f12}       @tab Insert minimal template   @tab @command{admb-template-mini}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{M-backspace} @tab Remove temporary files    @tab @command{admb-clean}
@item @kbd{M-up}        @tab Scroll other screen up    @tab @command{admb-scroll-up}
@item @kbd{M-down}      @tab Scroll other screen down  @tab @command{admb-scroll-down}
@item @kbd{C--}         @tab Toggle compilation flags  @tab @command{admb-toggle-flag}
@item @kbd{M-w}         @tab Toggle secondary window   @tab @command{admb-toggle-window}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@sp 2

@subsec TMB mode

@multitable @columnfractions .15 .40 .40
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Keystroke} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{f1}     @tab Help for TMB mode        @tab @command{tmb-help}
@item @kbd{f7}     @tab Clean                    @tab @command{tmb-clean}
@item @kbd{f8}     @tab Compile                  @tab @command{tmb-compile}
@item @kbd{f9}     @tab Run                      @tab @command{tmb-run}
@item @kbd{f10}    @tab View script              @tab @command{tmb-open}
@item @kbd{f11}    @tab Debug                    @tab @command{tmb-debug}
@item @kbd{f12}    @tab Mini template            @tab @command{tmb-template-mini}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{M-up}   @tab Scroll other screen up   @tab @command{tmb-scroll-up}
@item @kbd{M-down} @tab Scroll other screen down @tab @command{tmb-scroll-down}
@item @kbd{M-m}    @tab Multi-window layout      @tab @command{tmb-multi-window}
@item @kbd{M-w}    @tab Toggle secondary window  @tab @command{tmb-toggle-window}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@page

@subsec R mode
@anchor{R mode keybindings}

@multitable @columnfractions .10 .20 .65
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Keystroke} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{f9}  @tab Run line      @tab @command{ess-eval-region-or-line-and-step}
@item @kbd{f10} @tab Run paragraph @tab @command{ess-eval-region-or-function-or-paragraph-and-step}
@item @kbd{f11} @tab Run script    @tab @command{ess-save-buffer-and-eval}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@sp

@noindent In the R console window:

@multitable @columnfractions .10 .20 .65
@item@hrule@tab@hrule@tab@hrule
@item @kbd{C-up}   @tab Prev command @tab @command{comint-previous-input}
@item @kbd{C-down} @tab Next command @tab @command{comint-next-input}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@sp 2

@subsec @LaTeX@ mode
@anchor{@LaTeX@ mode keybindings}

@multitable @columnfractions .20 .30 .45
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Keystroke} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{f7}  @tab Prepare index    @tab @command{AUCTeX-index}
@item @kbd{f8}  @tab Prepare Bib@TeX@ @tab @command{AUCTeX-bibtex}
@item @kbd{f9}  @tab Compile document @tab @command{AUCTeX-compile}
@item @kbd{f10} @tab View document    @tab @command{AUCTeX-view}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@sp 2

@subsec Mouse

@multitable @columnfractions .20 .30 .45
@item@hrule@tab@hrule@tab@hrule
@headitem @emph{Mouse button} @tab @emph{Purpose} @tab @emph{Emacs command}
@item@hrule@tab@hrule@tab@hrule
@item @kbd{C-left-mouse} @tab Switch buffers      @tab @command{mouse-buffer-menu}
@item @kbd{middle-mouse} @tab Paste               @tab @command{mouse-yank-primary}
@item @kbd{right-mouse}  @tab Navigate with imenu @tab @command{imenu}
@item @kbd{C-wheel-up}   @tab Increase font size  @tab @command{text-scale-increase}
@item @kbd{C-wheel-down} @tab Decrease font size  @tab @command{text-scale-decrease}
@item@hrule@tab@hrule@tab@hrule
@end multitable

@chapter Hints and tips

@section Help pages

Both @command{admb-mode} and @command{tmb-mode} come with a help page that is
bound to the @key{f1} key when either of these modes is active. Furthermore, the
Emacs help system has a help page for every mode, function and variable, as well
as keystrokes:

@indentedblock
@multitable @columnfractions .07 .45
@item @kbd{C-h m} @tab Mode
@item @kbd{C-h f} @tab Function
@item @kbd{C-h v} @tab Variable
@item @kbd{C-h k} @tab Keystroke
@item @kbd{C-h a} @tab Search for command
@end multitable
@end indentedblock

@section Files

The keystrokes @kbd{C-n}, @kbd{C-o}, @kbd{C-s}, and @kbd{C-w} can be used to
create, open, save, and close files. For convenience, @kbd{C-p} opens any file
that has a similar name as the ADMB/TMB model, for example, @kbd{C-p@tie{}dat}
to open @file{mymodel.dat}. Directories can be created with @kbd{M-n} and
switched to with @kbd{C-d}. To quit AD Studio, press @kbd{C-q}.

@section Cut, copy, paste

These three commands are essential for editing any text, and they form a major
obstacle for users who try Emacs for the first time.

In almost all other editors, @kbd{C-x}, @kbd{C-c}, and @kbd{C-v} are used to
cut, copy, and paste. These are the keybindings that the majority of computer
users have memorized and use in a wide variety of applications. The default
keybindings in Emacs to cut, copy, and paste (@kbd{C-w}, @kbd{M-w}, @kbd{C-y})
are neither intuitive nor easy to memorize at first. Rebinding keystrokes is
easy enough in Emacs, except @kbd{C-x} and @kbd{C-c} are reserved keystrokes in
Emacs, to access many of the most important commands. Rebinding those keystrokes
is questionable, in the same way it would be questionable for an R package to
redefine things like @code{q()} or @code{pi}. There is no perfect solution, but
the alternatives include:

@enumerate
@item Bite the bullet and learn the Emacs defaults.
@item Define keybindings to cut/copy/paste that feel convenient, but are not
@kbd{C-x} or @kbd{C-c}.
@item Load special @code{cua-mode} that overrides the reserved defaults and
binds @kbd{C-x}, @kbd{C-c}, and @kbd{C-v} to cut, copy, and paste.
@end enumerate

@noindent
AD Studio takes the third option: CUA mode. Among the drawbacks is that text is
not reliably copied between applications, not even between Emacs instances.
Workarounds include:

@itemize @minus
@item Copy with @kbd{C-insert} and paste with @kbd{M-insert}.
@item Copy with left mouse button, paste with middle button.
@end itemize

@section Undo/redo

The undo command in AD Studio does both undo and redo. When undo is performed
repeatedly, it goes further back in the undo history. Any command other than
undo will interrupt this sequence, and from that point the previous undo
commands become ordinary changes that can be undone, equivalent to redo. Try,
for example, copying some text and then paste it three times. Now undo three
times, interrupt with a harmless key like the @key{up} arrow, and then undo
again to redo. To undo all changes since last save, it's easiest to reload using
the @key{f5} key.

@section Comment/uncomment

The @kbd{M-;} key comments or uncomments the highlighted code region, depending
on whether the region is already commented or not.

@section Secondary window

The default state of an AD Studio session is with the screen split in two parts,
with the ADMB/TMB model code (TPL/C++) in the main window and something else in
a secondary window. This secondary window can be navigated without leaving the
main window, using intuitive keybindings: @kbd{M-up}, @kbd{M-down},
@kbd{M-pgup}, @kbd{M-pgdn}, @kbd{M-home}, @kbd{M-end}.

If the secondary window contains compilation output, @kbd{M-up} and @kbd{M-down}
will navigate between error messages instead of lines.

@section Alt key

AD Studio does not emulate exactly the way many editors open menus with the
@key{Alt} key. To open the @clickthis{Edit} menu, for example, it is not enough
to press @key{Alt} and @key{e} simultaneously. AD Studio provides four ways to
open the @clickthis{Edit} menu:

@enumerate
@item Mouse click on the menu bar
@item Tap @key{Alt} first and then @key{e} (Windows)
@item Hold @key{Alt} and tap @key{e} twice (Windows)
@item Hold @key{Alt} and tap @key{f}, then release @key{Alt} and tap @key{right}
arrow (Linux)
@end enumerate

The idea behind AD Studio, however, is that users can memorize intuitive
keystrokes to undo, cut, copy, paste, find, replace, and goto line, without
opening the @clickthis{Edit} menu. Also don't forget that AD Studio is open
source, so users are free to modify any part of the program, including the
keybindings defined in the @file{.emacs} file.

@section Vi keybindings

Longtime users of the Vi editor can turn on Emacs @command{viper-mode}, which is
a full-featured Vi emulator for Emacs.

@chapter Editor options

@section Personal @code{.emacs} file

@noindent
AD Studio is intended for people who don't know Emacs, are not interested in
learning it, and will only use it to work with ADMB and TMB. The design goal is
that AD Studio should work out of the box and get the job done with minimum
fuss.

It is, however, in the nature of modellers to experiment and improve. Users who
modify the original @file{.emacs} file are no longer using AD Studio, but Emacs
with packages and a personal @file{.emacs} file. One reason to modify the
@file{.emacs} file or write a new one from scratch is to install additional
Emacs packages. Another reason is to redefine the keybindings, perhaps closer to
the Emacs defaults. Other reasons include setting fonts and colors, setting user
variables, or defining new user functions. Users with a personal @file{.emacs}
file can update ADMB, GCC, GDB, Emacs and packages independently.

Note that it is not advisable to configure Emacs by clicking @clickthis{Options
@click{} Save Options} or @clickthis{Options @click{} Customize Emacs}. Editing
the @file{.emacs} file directly is a more reliable and transparent approach. See
@uref{http://admb-project.org/tools/editors/emacs} for guidelines.

@subsec Example

@noindent
The @key{f10} key in @command{admb-mode} runs @command{admb-rep} to a open a
report file:

@smallexample
(local-set-key [f10] 'admb-rep) ; menu-bar-open
@end smallexample

@noindent
The semicolon starts a comment, reminding that the default behavior of Emacs is
to run @command{menu-bar-open} when @key{f10} is pressed. In AD Studio, it is
easy to activate the menu bar with the mouse or the @key{Alt} key, so @key{f10}
can be used for something else.

Some users may find it practical to open the report file in an external browser,
rather than inside AD Studio. The report file is often best viewed in a large
window, and the AD Studio windows are somewhat busy showing other things. It is
easy to rebind the @key{f10} key,

@smallexample
(local-set-key [f10] 'admb-rep-browser) ; menu-bar-open
@end smallexample

@noindent
but as mentioned in the documentation of @command{admb-rep-browser}, the
@file{.rep} file ending in Windows may need to be associated with the desired
browser program, Firefox or the like.

@section Recent files

Emacs has an optional @command{recentf-mode} to allow the user to open recent
files. However, this feature was slightly problematic in previous versions of
Emacs on Windows. For some users, the menu of recently opened files would hang
for a long time, while for the majority of users the feature worked perfectly.

To stay on the safe side, this feature is disabled in the default AD Studio
@file{.emacs} file. To enable it, simply uncomment the line containing
@command{recentf-mode}. The keybinding is @kbd{C-M-space}.

@section Custom startup

@noindent
It can be practical to have AD Studio available, while using a personal
@file{.emacs} file for most Emacs sessions. For example, an experienced Emacs
user may want to test how AD Studio works, or demonstrate it to colleagues,
without constantly shuffling @file{.emacs} files. In Windows, one can place the
AD Studio @file{.emacs} file in @code{c:/~/adstudio} and then start AD Studio
with the shell command:

@smallexample
c:/gnu/emacs/bin/runemacs.exe -Q -l c:/~/adstudio/.emacs
@end smallexample

The @option{-Q} option tells Emacs to ignore the default startup file(s) and
@option{-l} tells it to load a Lisp file. This command can be used in a start
menu or desktop shortcut, with the @code{c:/~/icons/ad.ico} decorative icon, and
similar tricks can be used in Linux and Mac.

@chapter Troubleshooting

@section{General usage}

@subsec The ADMB/TMB menu and toolbar icons disappear

@noindent
These only appear when the current buffer is in @command{admb-mode} or
@command{tmb-mode}. Either switch to a source code buffer that is already in
@command{admb-mode} or @command{tmb-mode}, or press @key{f2} or @key{f3} in the
current buffer. Other modes may have special menus and toolbar icons that are
useful for that mode, see for example the @ref{GDB,,GDB screenshot}.

@subsec The @key{tab} key does not indent code properly

@noindent
ADMB Mode does not know the appropriate indentation of every line, so generally
users indent their code manually using @key{space} and @key{backspace}. The
@key{tab} key is programmed to insert a number of spaces, as suggested by the
previous line, which is sometimes useful.

@subsec Lines end with strange @code{^M} characters

@noindent
This is how Emacs shows Dos line endings, although in most cases Dos line
endings are handled more gracefully. It could be that the file contains mixed
line endings (both Dos and Unix), and the simplest solution is to delete all
@code{^M} characters. This can be done using the @key{M-,} key that deletes all
trailing whitespace. It could also be that the Emacs variable
@code{file-name-buffer-file-type-alist} matches the @file{.tpl} file ending, and
the simplest solution is to set that variable to @code{nil}.

@subsec Clicking (@clickthis{ADMB @click{} Run Makefile}) or (@clickthis{TMB
@click{} Make}) returns an error

@noindent
Makefiles are a sophisticated build automation tool, not required for general
ADMB or TMB usage. This command invokes the @command{make} program that looks
for a file called @file{Makefile}. If the @command{make} program or the makefile
is not found, an error is returned. This feature is provided for advanced users
who have prepared a makefile in the working directory.

@section{Configuration}
@anchor{Configuration}

@subsec Double-clicking a @file{.tpl} file does not open it in Emacs

@noindent
The @file{.tpl} file ending needs to be associated with Emacs. This can be done
with registry entries or in Windows Explorer folder options.

@subsec Emacs cannot load @command{admb-mode} or @command{tmb-mode}

@noindent
The directory containing the @file{admb.el} file needs to be in the Emacs
variable @code{load-path}, and the @command{admb-mode} command needs to be
autoloaded in the @file{.emacs} settings. The same holds for @file{tmb.el} and
other Emacs packages.

@page

@subsec ADMB compilation commands not recognized

@noindent
The @env{PATH} environment variable needs to point to the directories containing
the compilation programs (@command{tpl2cpp}, @command{tpl2rem}), scripts
(@command{admb}, @command{adcomp}, @command{adlink}), and the
@command{g++} program. Likewise, the @env{ADMB_HOME} environment variable
needs to point to the main ADMB directory. Windows environment variables can be
set using Dos scripts like @code{c:/~/bat/admb-set.bat}, or by right-clicking
the My Computer icon, then @clickthis{Properties @click{} Advanced @click{}
Environment Variables @click{} User variables @click{} New}.

Limited user (i.e., non-administrator) accounts in Windows can also prevent the
AD Studio installer from setting the environment variables @env{ADMB_HOME} and
@env{PATH}. In those cases, the right-click-properties method described above
can be used to set the variables after the installation. Many Linux
distributions include only the C component of GCC, so users need to install the
optional C++ component before using ADMB.

@subsec Conflicting compilers and libraries

@noindent
When developing models using ADMB or TMB, it is important to have only one C++
compiler in the PATH. Likewise, a maximum of one version of ADMB should be in
the PATH. Otherwise, errors will occur as objects and libraries of different
versions are linked together.

AD Studio uses the C++ compiler that comes with Rtools, which should be used for
compiling both ADMB and TMB models. If other C++ compilers are on the machine,
it may be necessary to remove them the PATH, either by modifying the PATH
environment variable, or temporarily renaming directories.

@chapter References

@subsec ADMB

@noindent
Fournier, D.A., H.J. Skaug, J. Ancheta, J. Ianelli, A. Magnusson, M.N. Maunder,
A. Nielsen, and J. Sibert. 2012. @cite{AD Model Builder: Using automatic
differentiation for statistical inference of highly parameterized complex
nonlinear models.} Optimization Methods and Software 27:233--249.@*
@uref{http://dx.doi.org/10.1080/10556788.2011.597854}
@sp 0.5
@noindent
Fournier, D. @cite{An introduction to AD Model Builder for use in nonlinear
modeling and statistics.}@*
@uref{http://admb-project.org/docs/manuals/}
@sp 0.5
@noindent
Skaug, H. and D. Fournier. @cite{Random effects in AD Model Builder: ADMB-RE
user guide.}@*
@uref{http://admb-project.org/docs/manuals/}
@sp 0.5
@noindent
Fournier, D. @cite{AUTODIF: A C++ array language extension with automatic
differentiation for use in nonlinear modeling and statistics.}@*
@uref{http://admb-project.org/docs/manuals/}
@sp 0.5
@noindent
Magnusson, A. 2009. @cite{ADMB-IDE: Easy and efficient user interface.} ADMB
Foundation Newsletter 1(3):1--2.@*
@w{@uref{http://admb-foundation.org/wp-content/uploads/Newsletter/ADMBNewsletterJuly2009.pdf}}

@sp 1
@subsec TMB

@noindent
Kristensen, K., A. Nielsen, C.W. Berg, H. Skaug, and B. Bell. 2016.
@cite{TMB: Automatic differentiation and Laplace approximation.}
J. Stat. Softw. 70(5):1--21.@*
@uref{http://dx.doi.org/10.18637/jss.v070.i05}
@sp 0.5
@noindent
Kristensen, K. with contributions by B. Bell, H. Skaug, A. Magnusson, C. Berg,
A. Nielsen, M. Maechler, T. Michelot, M. Brooks, A. Forrence, C.M. Albertsen,
and C. Monnahan. @cite{Template Model Builder: A general random effect tool
inspired by ADMB.}@*
@uref{https://cran.r-project.org/package=TMB}
@sp 0.5
@noindent
Magnusson, A. 2015. TMB-IDE: Emacs @command{tmb-mode} without the Emacs.@*
@uref{ftp://ftp.hafro.is/pub/tmb/tmb-ide.pdf}

@sp 1
@subsec Emacs

@noindent
Stallman, R. @cite{GNU Emacs manual.}@*
@uref{http://www.gnu.org/software/emacs/manual/emacs.html}
@sp 0.5
@noindent
Lewis, B., D. LaLiberte, R. Stallman, and the GNU Manual Group. @cite{GNU Emacs
Lisp reference manual for Emacs.}@*
@uref{http://www.gnu.org/software/emacs/manual/elisp.html}
@sp 0.5
@noindent
Chassell, R. @cite{An introduction to programming in Emacs Lisp.}@*
@uref{http://www.gnu.org/software/emacs/manual/eintr.html}
@sp 0.5
@noindent
Rossini, A.J., R.M. Heiberger, K. Hornik, M. Maechler, R.A. Sparapani, S.J.
Eglen, S.P. Luque, H. Redestig, V. Spinu, and L. Henry. @cite{ESS: Emacs Speaks
Statistics.}@*
@uref{http://ess.r-project.org/index.php?Section=documentation&subSection=manuals}

@sp 1
@subsec GCC & GDB

@noindent
Stallman, R.M. and GCC Developer Community. @cite{Using the GNU Compiler
Collection.}@*
@uref{http://gcc.gnu.org/onlinedocs/}
@sp 0.5
@noindent
Stallman, R., R. Pesch, S. Shebs, et al. @cite{Debugging with GDB: The GNU
source-level debugger.}@*
@uref{http://sourceware.org/gdb/download/onlinedocs/}

@bye
